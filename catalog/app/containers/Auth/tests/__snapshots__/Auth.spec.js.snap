// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Feature: containers/Auth/Callback Background: Given minimal setup Given storage has empty auth data Scenario: Mounting the component when the tokens are invalid When the component tree is mounted Then the user should see the activity indicator 1`] = `
<div>
  <div
    __name="Working"
  >
    <span>
      Authenticating...
    </span>
  </div>
</div>
`;

exports[`Feature: containers/Auth/Callback Background: Given minimal setup Given storage has empty auth data Scenario: Mounting the component when the tokens are invalid When the component tree is mounted Then the user should see the activity indicator 2`] = `
Object {
  "authenticated": false,
  "domain": Object {
    "state": "SIGNING_IN",
    "tokens": Object {
      "access_token": "ACCESS2",
      "expires_at": 1514907960,
      "refresh_token": "REFRESH2",
    },
  },
  "email": undefined,
  "error": undefined,
  "state": "SIGNING_IN",
  "tokens": Object {
    "access_token": "ACCESS2",
    "expires_at": 1514907960,
    "refresh_token": "REFRESH2",
  },
  "username": undefined,
  "waiting": true,
}
`;

exports[`Feature: containers/Auth/Callback Background: Given minimal setup Given storage has empty auth data Scenario: Mounting the component when the tokens are invalid When the component tree is mounted When user request is rejected Then the user should not be signed in 1`] = `
<div>
  <div
    __name="Home"
  />
  <div
    __name="Notification"
    action="[object Object]"
    message="Error signing in"
  />
</div>
`;

exports[`Feature: containers/Auth/Callback Background: Given minimal setup Given storage has empty auth data Scenario: Mounting the component when the tokens are invalid When the component tree is mounted When user request is rejected Then the user should not be signed in 2`] = `
Object {
  "authenticated": false,
  "domain": Object {
    "error": [Error: test],
    "state": "SIGNED_OUT",
  },
  "email": undefined,
  "error": [Error: test],
  "state": "SIGNED_OUT",
  "tokens": Object {},
  "username": undefined,
  "waiting": false,
}
`;

exports[`Feature: containers/Auth/Callback Background: Given minimal setup Given storage has empty auth data Scenario: Mounting the component when the tokens are valid When the component tree is mounted Then the user should see the activity indicator 1`] = `
<div>
  <div
    __name="Working"
  >
    <span>
      Authenticating...
    </span>
  </div>
</div>
`;

exports[`Feature: containers/Auth/Callback Background: Given minimal setup Given storage has empty auth data Scenario: Mounting the component when the tokens are valid When the component tree is mounted Then the user should see the activity indicator 2`] = `
Object {
  "authenticated": false,
  "domain": Object {
    "state": "SIGNING_IN",
    "tokens": Object {
      "access_token": "ACCESS2",
      "expires_at": 1514907960,
      "refresh_token": "REFRESH2",
    },
  },
  "email": undefined,
  "error": undefined,
  "state": "SIGNING_IN",
  "tokens": Object {
    "access_token": "ACCESS2",
    "expires_at": 1514907960,
    "refresh_token": "REFRESH2",
  },
  "username": undefined,
  "waiting": true,
}
`;

exports[`Feature: containers/Auth/Callback Background: Given minimal setup Given storage has empty auth data Scenario: Mounting the component when the tokens are valid When the component tree is mounted When user request is resolved Then the user should be signed in 1`] = `
<div>
  <div
    __name="Private"
  />
</div>
`;

exports[`Feature: containers/Auth/Callback Background: Given minimal setup Given storage has empty auth data Scenario: Mounting the component when the tokens are valid When the component tree is mounted When user request is resolved Then the user should be signed in 2`] = `
Object {
  "authenticated": true,
  "domain": Object {
    "state": "SIGNED_IN",
    "tokens": Object {
      "access_token": "ACCESS2",
      "expires_at": 1514907960,
      "refresh_token": "REFRESH2",
    },
    "user": Object {
      "current_user": "admin",
      "email": "admin@localhost",
      "is_active": true,
      "is_staff": true,
    },
  },
  "email": "admin@localhost",
  "error": undefined,
  "state": "SIGNED_IN",
  "tokens": Object {
    "access_token": "ACCESS2",
    "expires_at": 1514907960,
    "refresh_token": "REFRESH2",
  },
  "username": "admin",
  "waiting": false,
}
`;

exports[`Feature: containers/Auth/SignOut Background: Given minimal setup Scenario: Mounting the component when auth data is absent Given storage has empty auth data When the component tree is mounted Then the user should be signed out 1`] = `
<div>
  <div
    __name="Home"
  />
</div>
`;

exports[`Feature: containers/Auth/SignOut Background: Given minimal setup Scenario: Mounting the component when auth data is absent Given storage has empty auth data When the component tree is mounted Then the user should be signed out 2`] = `
Object {
  "authenticated": false,
  "domain": Object {
    "state": "SIGNED_OUT",
  },
  "email": undefined,
  "error": undefined,
  "state": "SIGNED_OUT",
  "tokens": Object {},
  "username": undefined,
  "waiting": false,
}
`;

exports[`Feature: containers/Auth/SignOut Background: Given minimal setup Scenario: Mounting the component when auth data is current Given storage has current auth data When the component tree is mounted Then the user should be signed out 1`] = `
<div>
  <div
    __name="Home"
  />
</div>
`;

exports[`Feature: containers/Auth/SignOut Background: Given minimal setup Scenario: Mounting the component when auth data is current Given storage has current auth data When the component tree is mounted Then the user should be signed out 2`] = `
Object {
  "authenticated": false,
  "domain": Object {
    "state": "SIGNED_OUT",
  },
  "email": undefined,
  "error": undefined,
  "state": "SIGNED_OUT",
  "tokens": Object {},
  "username": undefined,
  "waiting": false,
}
`;

exports[`Feature: containers/Auth/SignOut Background: Given minimal setup Scenario: Mounting the component when auth data is stale and then gets refreshed successfully Given storage has stale auth data When the component tree is mounted Then the user should see the activity indicator 1`] = `
<div>
  <div
    __name="Working"
  >
    <span>
      Signing out...
    </span>
  </div>
</div>
`;

exports[`Feature: containers/Auth/SignOut Background: Given minimal setup Scenario: Mounting the component when auth data is stale and then gets refreshed successfully Given storage has stale auth data When the component tree is mounted Then the user should see the activity indicator 2`] = `
Object {
  "authenticated": true,
  "domain": Object {
    "state": "REFRESHING",
    "tokens": Object {
      "access_token": "ACCESS1",
      "expires_at": 1514707980,
      "refresh_token": "REFRESH1",
    },
    "user": Object {
      "current_user": "admin",
      "email": "admin@localhost",
      "is_active": true,
      "is_staff": true,
    },
  },
  "email": "admin@localhost",
  "error": undefined,
  "state": "REFRESHING",
  "tokens": Object {
    "access_token": "ACCESS1",
    "expires_at": 1514707980,
    "refresh_token": "REFRESH1",
  },
  "username": "admin",
  "waiting": true,
}
`;

exports[`Feature: containers/Auth/SignOut Background: Given minimal setup Scenario: Mounting the component when auth data is stale and then gets refreshed successfully Given storage has stale auth data When the component tree is mounted When auth refresh requests are resolved Then the user should be signed out 1`] = `
<div>
  <div
    __name="Home"
  />
</div>
`;

exports[`Feature: containers/Auth/SignOut Background: Given minimal setup Scenario: Mounting the component when auth data is stale and then gets refreshed successfully Given storage has stale auth data When the component tree is mounted When auth refresh requests are resolved Then the user should be signed out 2`] = `
Object {
  "authenticated": false,
  "domain": Object {
    "state": "SIGNED_OUT",
  },
  "email": undefined,
  "error": undefined,
  "state": "SIGNED_OUT",
  "tokens": Object {},
  "username": undefined,
  "waiting": false,
}
`;

exports[`Feature: containers/Auth/SignOut Background: Given minimal setup Scenario: Mounting the component when auth data is stale and then gets refreshed with error Given storage has stale auth data When the component tree is mounted Then the user should see the activity indicator 1`] = `
<div>
  <div
    __name="Working"
  >
    <span>
      Signing out...
    </span>
  </div>
</div>
`;

exports[`Feature: containers/Auth/SignOut Background: Given minimal setup Scenario: Mounting the component when auth data is stale and then gets refreshed with error Given storage has stale auth data When the component tree is mounted Then the user should see the activity indicator 2`] = `
Object {
  "authenticated": true,
  "domain": Object {
    "state": "REFRESHING",
    "tokens": Object {
      "access_token": "ACCESS1",
      "expires_at": 1514707980,
      "refresh_token": "REFRESH1",
    },
    "user": Object {
      "current_user": "admin",
      "email": "admin@localhost",
      "is_active": true,
      "is_staff": true,
    },
  },
  "email": "admin@localhost",
  "error": undefined,
  "state": "REFRESHING",
  "tokens": Object {
    "access_token": "ACCESS1",
    "expires_at": 1514707980,
    "refresh_token": "REFRESH1",
  },
  "username": "admin",
  "waiting": true,
}
`;

exports[`Feature: containers/Auth/SignOut Background: Given minimal setup Scenario: Mounting the component when auth data is stale and then gets refreshed with error Given storage has stale auth data When the component tree is mounted When auth refresh requests are rejected Then the user should be signed out 1`] = `
<div>
  <div
    __name="Home"
  />
  <div
    __name="Notification"
    message="Authentication lost"
  />
</div>
`;

exports[`Feature: containers/Auth/SignOut Background: Given minimal setup Scenario: Mounting the component when auth data is stale and then gets refreshed with error Given storage has stale auth data When the component tree is mounted When auth refresh requests are rejected Then the user should be signed out 2`] = `
Object {
  "authenticated": false,
  "domain": Object {
    "error": [Error: Auth refresh hiccup],
    "state": "SIGNED_OUT",
  },
  "email": undefined,
  "error": [Error: Auth refresh hiccup],
  "state": "SIGNED_OUT",
  "tokens": Object {},
  "username": undefined,
  "waiting": false,
}
`;

exports[`Feature: containers/Auth/wrapper Background: Given minimal setup Scenario: Mounting the wrapped component when auth data is current Given storage has current auth data When the component tree is mounted Then the wrapped component should be rendered 1`] = `
<div>
  <div
    __name="Private"
  />
</div>
`;

exports[`Feature: containers/Auth/wrapper Background: Given minimal setup Scenario: Mounting the wrapped component when auth data is current Given storage has current auth data When the component tree is mounted When authentication is lost Then error screen should be displayed 1`] = `
<div>
  <div
    __name="Error"
    detail="[object Object]"
    headline="[object Object]"
  />
  <div
    __name="Notification"
    message="Authentication lost"
  />
</div>
`;

exports[`Feature: containers/Auth/wrapper Background: Given minimal setup Scenario: Mounting the wrapped component when auth data is stale and then gets refreshed successfully Given storage has stale auth data When the component tree is mounted Then the wrapped component should be rendered 1`] = `
<div>
  <div
    __name="Private"
  />
</div>
`;

exports[`Feature: containers/Auth/wrapper Background: Given minimal setup Scenario: Mounting the wrapped component when auth data is stale and then gets refreshed successfully Given storage has stale auth data When the component tree is mounted When auth refresh requests are resolved Then the wrapped component should be rendered 1`] = `
<div>
  <div
    __name="Private"
  />
</div>
`;

exports[`Feature: containers/Auth/wrapper Background: Given minimal setup Scenario: Mounting the wrapped component when auth data is stale and then gets refreshed with error Given storage has stale auth data When the component tree is mounted Then wrapped component should be rendered 1`] = `
<div>
  <div
    __name="Private"
  />
</div>
`;

exports[`Feature: containers/Auth/wrapper Background: Given minimal setup Scenario: Mounting the wrapped component when auth data is stale and then gets refreshed with error Given storage has stale auth data When the component tree is mounted When auth refresh requests are rejected Then error screen should be displayed 1`] = `
<div>
  <div
    __name="Error"
    detail="[object Object]"
    headline="[object Object]"
  />
  <div
    __name="Notification"
    message="Authentication lost"
  />
</div>
`;
