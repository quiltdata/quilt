worker_processes auto;
pid /run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_names_hash_bucket_size 64;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    resolver $NAMESERVER ipv6=off;

    server {
        listen 3333 default_server;
        listen [::]:3333 default_server;

        gzip on;
        gzip_min_length 1024;
        gzip_types text/plain text/css application/json application/javascript;

        client_max_body_size 8m;

        # if ($http_x_forwarded_proto = 'http') {
        #     return 400;
        # }

        location ~ ^/(?<s3_region>[^/]+)/(?<s3_bucket>[^/]+)(/(?<s3_path>.*))? {
            proxy_http_version 1.1;
            proxy_buffering off;

            # Add CORS headers.
            add_header 'Access-Control-Allow-Headers' $http_access_control_request_headers always;
            add_header 'Access-Control-Allow-Methods' $http_access_control_request_method always;
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Max-Age' '3000' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length, Content-Range, ETag, x-amz-meta-helium, x-amz-bucket-region, x-amz-delete-marker, x-amz-request-id, x-amz-version-id, x-amz-storage-class' always;

            # Return success on OPTIONS.
            if ($request_method = 'OPTIONS') {
                return 200;
            }

            # Proxy everything else to S3.
            # Use $request_uri rather than $s3_path because it needs to stay encoded.
            if ($request_uri ~ "^/[^/?]+/[^/?]+/?(.*)") {
                proxy_pass 'https://$s3_bucket.s3.$s3_region.amazonaws.com/$1';
            }

            # Remove any existing CORS headers from the response to avoid duplicates.
            proxy_hide_header 'Access-Control-Allow-Headers';
            proxy_hide_header 'Access-Control-Allow-Methods';
            proxy_hide_header 'Access-Control-Allow-Origin';
            proxy_hide_header 'Access-Control-Max-age';
            proxy_hide_header 'Access-Control-Expose-Headers';
        }

        location = / {
            add_header 'Content-Type' 'text/plain';
            return 200 'S3 Proxy';
        }
    }

    server {
        listen 80 default_server;
        listen [::]:80 default_server;

        location ~ ^/zip/.* {
            proxy_pass $INTERNAL_REGISTRY_URL;
            proxy_http_version 1.1;
            proxy_buffering off;

            proxy_set_header Host $REGISTRY_HOST;

            # mod_zip cannot handle compressed output from the upstream.
            proxy_set_header Accept-Encoding '';

            # Hide the mod_zip header from the client, it is only used
            # within nginx to trigger the mod_zip code.
            proxy_hide_header X-Archive-Files;
        }

        location / {
            proxy_pass http://127.0.0.1:3333;
            proxy_http_version 1.1;
            proxy_buffering off;
            proxy_intercept_errors on;
        }
    }
}
