worker_processes auto;
pid /run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_names_hash_bucket_size 64;
    server_tokens off;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    resolver $NAMESERVER ipv6=off;

    server {
        listen 3333 default_server;
        listen [::]:3333 default_server;

        location ~ ^/(?<s3_host>[^/]+\.amazonaws\.com)(?<s3_path>/.*) {
            client_max_body_size 10G;

            proxy_http_version 1.1;
            proxy_buffering off;
            proxy_request_buffering off;
            proxy_ssl_verify on;
            proxy_ssl_verify_depth 5;
            proxy_ssl_trusted_certificate /etc/ssl/cert.pem;

            # Add CORS headers.
            add_header 'Access-Control-Allow-Headers' $http_access_control_request_headers always;
            add_header 'Access-Control-Allow-Methods' $http_access_control_request_method always;
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Max-Age' '3000' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length, Content-Range, ETag, x-amz-meta-helium, x-amz-bucket-region, x-amz-delete-marker, x-amz-request-id, x-amz-version-id, x-amz-storage-class' always;

            # Return success on OPTIONS.
            if ($request_method = 'OPTIONS') {
                return 200;
            }

            # Proxy the request to S3. It *MUST* be done inside an "if", using "$1" -
            # calling "set" causes the URL to be decoded, breaking paths with spaces, etc.
            if ($request_uri ~ "^/[^/?]+(.*)") {
                proxy_pass 'https://$s3_host$1';
            }

            # Remove any existing CORS headers from the response to avoid duplicates.
            proxy_hide_header 'Access-Control-Allow-Headers';
            proxy_hide_header 'Access-Control-Allow-Methods';
            proxy_hide_header 'Access-Control-Allow-Origin';
            proxy_hide_header 'Access-Control-Max-age';
            proxy_hide_header 'Access-Control-Expose-Headers';
        }

        location ~ ^/(?<s3_host>[^/]+)/.* {
            # Hostname doesn't end in amazonaws.com; return a helpful error just for debugging.
            add_header 'Content-Type' 'text/plain' always;
            return 400 'Unexpected host: $s3_host';
        }

        location = / {
            add_header 'Content-Type' 'text/plain';
            return 200 'S3 Proxy';
        }

        location = /robots.txt {
            add_header 'Content-Type' 'text/plain';
            return 200 'User-agent: *\nDisallow: /\n';
        }
    }

    server {
        listen 80 default_server;
        listen [::]:80 default_server;

        # Use a variable to force Nginx to re-resolve the DNS name.
        set $registry $INTERNAL_REGISTRY_URL;

        location ~ ^/zip/.* {
            proxy_pass $registry;
            proxy_http_version 1.1;
            proxy_buffering off;
            # registry uwsgi_read_timeout + 1
            proxy_read_timeout 1001s;

            # mod_zip cannot handle compressed output from the upstream.
            proxy_set_header Accept-Encoding '';

            # Hide the mod_zip header from the client, it is only used
            # within nginx to trigger the mod_zip code.
            proxy_hide_header X-Archive-Files;
        }

        location ~ ^/browse/.* {
            proxy_pass $registry;
            proxy_http_version 1.1;
            proxy_buffering off;

            proxy_intercept_errors on;
            error_page 301 302 307 = @handle_redirect;
        }

        location @handle_redirect {
            internal;
            # Add CORS headers.
            add_header 'Access-Control-Allow-Headers' $http_access_control_request_headers always;
            add_header 'Access-Control-Allow-Methods' $http_access_control_request_method always;
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Max-Age' '3000' always;

            set $saved_redirect_location '$upstream_http_location';
            proxy_pass $saved_redirect_location;
        }

        location / {
            client_max_body_size 10G;

            proxy_pass http://127.0.0.1:3333;
            proxy_http_version 1.1;
            proxy_buffering off;
            proxy_request_buffering off;
        }
    }
}
