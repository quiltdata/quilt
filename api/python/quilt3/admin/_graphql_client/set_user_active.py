# Generated by ariadne-codegen
# Source: queries.graphql

from typing import Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .fragments import InvalidInputSelection, OperationErrorSelection, UserSelection


class SetUserActive(BaseModel):
    admin: "SetUserActiveAdmin"


class SetUserActiveAdmin(BaseModel):
    user: "SetUserActiveAdminUser"


class SetUserActiveAdminUser(BaseModel):
    mutate: Optional["SetUserActiveAdminUserMutate"]


class SetUserActiveAdminUserMutate(BaseModel):
    set_active: Union[
        "SetUserActiveAdminUserMutateSetActiveUser",
        "SetUserActiveAdminUserMutateSetActiveInvalidInput",
        "SetUserActiveAdminUserMutateSetActiveOperationError",
    ] = Field(alias="setActive", discriminator="typename__")


class SetUserActiveAdminUserMutateSetActiveUser(UserSelection):
    typename__: Literal["User"] = Field(alias="__typename")


class SetUserActiveAdminUserMutateSetActiveInvalidInput(InvalidInputSelection):
    typename__: Literal["InvalidInput"] = Field(alias="__typename")


class SetUserActiveAdminUserMutateSetActiveOperationError(OperationErrorSelection):
    typename__: Literal["OperationError"] = Field(alias="__typename")


SetUserActive.model_rebuild()
SetUserActiveAdmin.model_rebuild()
SetUserActiveAdminUser.model_rebuild()
SetUserActiveAdminUserMutate.model_rebuild()
