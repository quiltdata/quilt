# Generated by ariadne-codegen
# Source: queries.graphql

from typing import Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .fragments import InvalidInputSelection, OperationErrorSelection, UserSelection


class SetUserAdmin(BaseModel):
    admin: "SetUserAdminAdmin"


class SetUserAdminAdmin(BaseModel):
    user: "SetUserAdminAdminUser"


class SetUserAdminAdminUser(BaseModel):
    mutate: Optional["SetUserAdminAdminUserMutate"]


class SetUserAdminAdminUserMutate(BaseModel):
    set_admin: Union[
        "SetUserAdminAdminUserMutateSetAdminUser",
        "SetUserAdminAdminUserMutateSetAdminInvalidInput",
        "SetUserAdminAdminUserMutateSetAdminOperationError",
    ] = Field(alias="setAdmin", discriminator="typename__")


class SetUserAdminAdminUserMutateSetAdminUser(UserSelection):
    typename__: Literal["User"] = Field(alias="__typename")


class SetUserAdminAdminUserMutateSetAdminInvalidInput(InvalidInputSelection):
    typename__: Literal["InvalidInput"] = Field(alias="__typename")


class SetUserAdminAdminUserMutateSetAdminOperationError(OperationErrorSelection):
    typename__: Literal["OperationError"] = Field(alias="__typename")


SetUserAdmin.model_rebuild()
SetUserAdminAdmin.model_rebuild()
SetUserAdminAdminUser.model_rebuild()
SetUserAdminAdminUserMutate.model_rebuild()
