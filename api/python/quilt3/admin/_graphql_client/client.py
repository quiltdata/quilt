# Generated by ariadne-codegen
# Source: queries.graphql

from typing import Any, Dict, List, Optional, Union

from .add_roles import AddRoles, AddRolesAdminUserMutate
from .base_client import BaseClient
from .base_model import UNSET, UnsetType
from .create_user import (
    CreateUser,
    CreateUserAdminUserCreateInvalidInput,
    CreateUserAdminUserCreateOperationError,
    CreateUserAdminUserCreateUser,
)
from .delete_user import DeleteUser, DeleteUserAdminUserMutate
from .get_roles import GetRoles, GetRolesRolesManagedRole, GetRolesRolesUnmanagedRole
from .get_user import GetUser, GetUserAdminUserGet
from .get_users import GetUsers, GetUsersAdminUserList
from .input_types import UserInput
from .remove_roles import RemoveRoles, RemoveRolesAdminUserMutate
from .reset_user_password import ResetUserPassword, ResetUserPasswordAdminUserMutate
from .set_role import SetRole, SetRoleAdminUserMutate
from .set_user_active import SetUserActive, SetUserActiveAdminUserMutate
from .set_user_admin import SetUserAdmin, SetUserAdminAdminUserMutate
from .set_user_email import SetUserEmail, SetUserEmailAdminUserMutate


def gql(q: str) -> str:
    return q


class Client(BaseClient):
    def get_roles(
        self, **kwargs: Any
    ) -> List[Union[GetRolesRolesUnmanagedRole, GetRolesRolesManagedRole]]:
        query = gql(
            """
            query getRoles {
              roles {
                ...RoleSelection
              }
            }

            fragment ManagedRoleSelection on ManagedRole {
              id
              name
              arn
            }

            fragment RoleSelection on Role {
              __typename
              ...UnmanagedRoleSelection
              ...ManagedRoleSelection
            }

            fragment UnmanagedRoleSelection on UnmanagedRole {
              id
              name
              arn
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(
            query=query, operation_name="getRoles", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetRoles.model_validate(data).roles

    def get_user(self, name: str, **kwargs: Any) -> Optional[GetUserAdminUserGet]:
        query = gql(
            """
            query getUser($name: String!) {
              admin {
                user {
                  get(name: $name) {
                    ...UserSelection
                  }
                }
              }
            }

            fragment ManagedRoleSelection on ManagedRole {
              id
              name
              arn
            }

            fragment RoleSelection on Role {
              __typename
              ...UnmanagedRoleSelection
              ...ManagedRoleSelection
            }

            fragment UnmanagedRoleSelection on UnmanagedRole {
              id
              name
              arn
            }

            fragment UserSelection on User {
              name
              email
              dateJoined
              lastLogin
              isActive
              isAdmin
              isSsoOnly
              isService
              role {
                ...RoleSelection
              }
              extraRoles {
                ...RoleSelection
              }
            }
            """
        )
        variables: Dict[str, object] = {"name": name}
        response = self.execute(
            query=query, operation_name="getUser", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetUser.model_validate(data).admin.user.get

    def get_users(self, **kwargs: Any) -> List[GetUsersAdminUserList]:
        query = gql(
            """
            query getUsers {
              admin {
                user {
                  list {
                    ...UserSelection
                  }
                }
              }
            }

            fragment ManagedRoleSelection on ManagedRole {
              id
              name
              arn
            }

            fragment RoleSelection on Role {
              __typename
              ...UnmanagedRoleSelection
              ...ManagedRoleSelection
            }

            fragment UnmanagedRoleSelection on UnmanagedRole {
              id
              name
              arn
            }

            fragment UserSelection on User {
              name
              email
              dateJoined
              lastLogin
              isActive
              isAdmin
              isSsoOnly
              isService
              role {
                ...RoleSelection
              }
              extraRoles {
                ...RoleSelection
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(
            query=query, operation_name="getUsers", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetUsers.model_validate(data).admin.user.list

    def create_user(self, input: UserInput, **kwargs: Any) -> Union[
        CreateUserAdminUserCreateUser,
        CreateUserAdminUserCreateInvalidInput,
        CreateUserAdminUserCreateOperationError,
    ]:
        query = gql(
            """
            mutation createUser($input: UserInput!) {
              admin {
                user {
                  create(input: $input) {
                    __typename
                    ...UserMutationSelection
                  }
                }
              }
            }

            fragment InvalidInputSelection on InvalidInput {
              errors {
                path
                message
                name
                context
              }
            }

            fragment ManagedRoleSelection on ManagedRole {
              id
              name
              arn
            }

            fragment OperationErrorSelection on OperationError {
              message
              name
              context
            }

            fragment RoleSelection on Role {
              __typename
              ...UnmanagedRoleSelection
              ...ManagedRoleSelection
            }

            fragment UnmanagedRoleSelection on UnmanagedRole {
              id
              name
              arn
            }

            fragment UserMutationSelection on UserResult {
              ...UserSelection
              ...InvalidInputSelection
              ...OperationErrorSelection
            }

            fragment UserSelection on User {
              name
              email
              dateJoined
              lastLogin
              isActive
              isAdmin
              isSsoOnly
              isService
              role {
                ...RoleSelection
              }
              extraRoles {
                ...RoleSelection
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="createUser", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CreateUser.model_validate(data).admin.user.create

    def delete_user(
        self, name: str, **kwargs: Any
    ) -> Optional[DeleteUserAdminUserMutate]:
        query = gql(
            """
            mutation deleteUser($name: String!) {
              admin {
                user {
                  mutate(name: $name) {
                    delete {
                      __typename
                      ...InvalidInputSelection
                      ...OperationErrorSelection
                    }
                  }
                }
              }
            }

            fragment InvalidInputSelection on InvalidInput {
              errors {
                path
                message
                name
                context
              }
            }

            fragment OperationErrorSelection on OperationError {
              message
              name
              context
            }
            """
        )
        variables: Dict[str, object] = {"name": name}
        response = self.execute(
            query=query, operation_name="deleteUser", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DeleteUser.model_validate(data).admin.user.mutate

    def set_user_email(
        self, email: str, name: str, **kwargs: Any
    ) -> Optional[SetUserEmailAdminUserMutate]:
        query = gql(
            """
            mutation setUserEmail($email: String!, $name: String!) {
              admin {
                user {
                  mutate(name: $name) {
                    setEmail(email: $email) {
                      __typename
                      ...UserMutationSelection
                    }
                  }
                }
              }
            }

            fragment InvalidInputSelection on InvalidInput {
              errors {
                path
                message
                name
                context
              }
            }

            fragment ManagedRoleSelection on ManagedRole {
              id
              name
              arn
            }

            fragment OperationErrorSelection on OperationError {
              message
              name
              context
            }

            fragment RoleSelection on Role {
              __typename
              ...UnmanagedRoleSelection
              ...ManagedRoleSelection
            }

            fragment UnmanagedRoleSelection on UnmanagedRole {
              id
              name
              arn
            }

            fragment UserMutationSelection on UserResult {
              ...UserSelection
              ...InvalidInputSelection
              ...OperationErrorSelection
            }

            fragment UserSelection on User {
              name
              email
              dateJoined
              lastLogin
              isActive
              isAdmin
              isSsoOnly
              isService
              role {
                ...RoleSelection
              }
              extraRoles {
                ...RoleSelection
              }
            }
            """
        )
        variables: Dict[str, object] = {"email": email, "name": name}
        response = self.execute(
            query=query, operation_name="setUserEmail", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return SetUserEmail.model_validate(data).admin.user.mutate

    def set_user_admin(
        self, name: str, admin: bool, **kwargs: Any
    ) -> Optional[SetUserAdminAdminUserMutate]:
        query = gql(
            """
            mutation setUserAdmin($name: String!, $admin: Boolean!) {
              admin {
                user {
                  mutate(name: $name) {
                    setAdmin(admin: $admin) {
                      __typename
                      ...UserMutationSelection
                    }
                  }
                }
              }
            }

            fragment InvalidInputSelection on InvalidInput {
              errors {
                path
                message
                name
                context
              }
            }

            fragment ManagedRoleSelection on ManagedRole {
              id
              name
              arn
            }

            fragment OperationErrorSelection on OperationError {
              message
              name
              context
            }

            fragment RoleSelection on Role {
              __typename
              ...UnmanagedRoleSelection
              ...ManagedRoleSelection
            }

            fragment UnmanagedRoleSelection on UnmanagedRole {
              id
              name
              arn
            }

            fragment UserMutationSelection on UserResult {
              ...UserSelection
              ...InvalidInputSelection
              ...OperationErrorSelection
            }

            fragment UserSelection on User {
              name
              email
              dateJoined
              lastLogin
              isActive
              isAdmin
              isSsoOnly
              isService
              role {
                ...RoleSelection
              }
              extraRoles {
                ...RoleSelection
              }
            }
            """
        )
        variables: Dict[str, object] = {"name": name, "admin": admin}
        response = self.execute(
            query=query, operation_name="setUserAdmin", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return SetUserAdmin.model_validate(data).admin.user.mutate

    def set_user_active(
        self, active: bool, name: str, **kwargs: Any
    ) -> Optional[SetUserActiveAdminUserMutate]:
        query = gql(
            """
            mutation setUserActive($active: Boolean!, $name: String!) {
              admin {
                user {
                  mutate(name: $name) {
                    setActive(active: $active) {
                      __typename
                      ...UserMutationSelection
                    }
                  }
                }
              }
            }

            fragment InvalidInputSelection on InvalidInput {
              errors {
                path
                message
                name
                context
              }
            }

            fragment ManagedRoleSelection on ManagedRole {
              id
              name
              arn
            }

            fragment OperationErrorSelection on OperationError {
              message
              name
              context
            }

            fragment RoleSelection on Role {
              __typename
              ...UnmanagedRoleSelection
              ...ManagedRoleSelection
            }

            fragment UnmanagedRoleSelection on UnmanagedRole {
              id
              name
              arn
            }

            fragment UserMutationSelection on UserResult {
              ...UserSelection
              ...InvalidInputSelection
              ...OperationErrorSelection
            }

            fragment UserSelection on User {
              name
              email
              dateJoined
              lastLogin
              isActive
              isAdmin
              isSsoOnly
              isService
              role {
                ...RoleSelection
              }
              extraRoles {
                ...RoleSelection
              }
            }
            """
        )
        variables: Dict[str, object] = {"active": active, "name": name}
        response = self.execute(
            query=query, operation_name="setUserActive", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return SetUserActive.model_validate(data).admin.user.mutate

    def reset_user_password(
        self, name: str, **kwargs: Any
    ) -> Optional[ResetUserPasswordAdminUserMutate]:
        query = gql(
            """
            mutation resetUserPassword($name: String!) {
              admin {
                user {
                  mutate(name: $name) {
                    resetPassword {
                      __typename
                      ...InvalidInputSelection
                      ...OperationErrorSelection
                    }
                  }
                }
              }
            }

            fragment InvalidInputSelection on InvalidInput {
              errors {
                path
                message
                name
                context
              }
            }

            fragment OperationErrorSelection on OperationError {
              message
              name
              context
            }
            """
        )
        variables: Dict[str, object] = {"name": name}
        response = self.execute(
            query=query,
            operation_name="resetUserPassword",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return ResetUserPassword.model_validate(data).admin.user.mutate

    def set_role(
        self,
        name: str,
        role: str,
        append: bool,
        extra_roles: Union[Optional[List[str]], UnsetType] = UNSET,
        **kwargs: Any
    ) -> Optional[SetRoleAdminUserMutate]:
        query = gql(
            """
            mutation setRole($name: String!, $role: String!, $extraRoles: [String!], $append: Boolean!) {
              admin {
                user {
                  mutate(name: $name) {
                    setRole(role: $role, extraRoles: $extraRoles, append: $append) {
                      __typename
                      ...UserSelection
                      ...InvalidInputSelection
                      ...OperationErrorSelection
                    }
                  }
                }
              }
            }

            fragment InvalidInputSelection on InvalidInput {
              errors {
                path
                message
                name
                context
              }
            }

            fragment ManagedRoleSelection on ManagedRole {
              id
              name
              arn
            }

            fragment OperationErrorSelection on OperationError {
              message
              name
              context
            }

            fragment RoleSelection on Role {
              __typename
              ...UnmanagedRoleSelection
              ...ManagedRoleSelection
            }

            fragment UnmanagedRoleSelection on UnmanagedRole {
              id
              name
              arn
            }

            fragment UserSelection on User {
              name
              email
              dateJoined
              lastLogin
              isActive
              isAdmin
              isSsoOnly
              isService
              role {
                ...RoleSelection
              }
              extraRoles {
                ...RoleSelection
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "name": name,
            "role": role,
            "extraRoles": extra_roles,
            "append": append,
        }
        response = self.execute(
            query=query, operation_name="setRole", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return SetRole.model_validate(data).admin.user.mutate

    def add_roles(
        self, name: str, roles: List[str], **kwargs: Any
    ) -> Optional[AddRolesAdminUserMutate]:
        query = gql(
            """
            mutation addRoles($name: String!, $roles: [String!]!) {
              admin {
                user {
                  mutate(name: $name) {
                    addRoles(roles: $roles) {
                      __typename
                      ...UserSelection
                      ...InvalidInputSelection
                      ...OperationErrorSelection
                    }
                  }
                }
              }
            }

            fragment InvalidInputSelection on InvalidInput {
              errors {
                path
                message
                name
                context
              }
            }

            fragment ManagedRoleSelection on ManagedRole {
              id
              name
              arn
            }

            fragment OperationErrorSelection on OperationError {
              message
              name
              context
            }

            fragment RoleSelection on Role {
              __typename
              ...UnmanagedRoleSelection
              ...ManagedRoleSelection
            }

            fragment UnmanagedRoleSelection on UnmanagedRole {
              id
              name
              arn
            }

            fragment UserSelection on User {
              name
              email
              dateJoined
              lastLogin
              isActive
              isAdmin
              isSsoOnly
              isService
              role {
                ...RoleSelection
              }
              extraRoles {
                ...RoleSelection
              }
            }
            """
        )
        variables: Dict[str, object] = {"name": name, "roles": roles}
        response = self.execute(
            query=query, operation_name="addRoles", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return AddRoles.model_validate(data).admin.user.mutate

    def remove_roles(
        self,
        name: str,
        roles: List[str],
        fallback: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> Optional[RemoveRolesAdminUserMutate]:
        query = gql(
            """
            mutation removeRoles($name: String!, $roles: [String!]!, $fallback: String) {
              admin {
                user {
                  mutate(name: $name) {
                    removeRoles(roles: $roles, fallback: $fallback) {
                      __typename
                      ...UserSelection
                      ...InvalidInputSelection
                      ...OperationErrorSelection
                    }
                  }
                }
              }
            }

            fragment InvalidInputSelection on InvalidInput {
              errors {
                path
                message
                name
                context
              }
            }

            fragment ManagedRoleSelection on ManagedRole {
              id
              name
              arn
            }

            fragment OperationErrorSelection on OperationError {
              message
              name
              context
            }

            fragment RoleSelection on Role {
              __typename
              ...UnmanagedRoleSelection
              ...ManagedRoleSelection
            }

            fragment UnmanagedRoleSelection on UnmanagedRole {
              id
              name
              arn
            }

            fragment UserSelection on User {
              name
              email
              dateJoined
              lastLogin
              isActive
              isAdmin
              isSsoOnly
              isService
              role {
                ...RoleSelection
              }
              extraRoles {
                ...RoleSelection
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "name": name,
            "roles": roles,
            "fallback": fallback,
        }
        response = self.execute(
            query=query, operation_name="removeRoles", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return RemoveRoles.model_validate(data).admin.user.mutate
