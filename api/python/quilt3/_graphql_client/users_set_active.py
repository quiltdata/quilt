# Generated by ariadne-codegen
# Source: queries.graphql

from typing import Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .fragments import InvalidInputSelection, OperationErrorSelection, UserSelection


class UsersSetActive(BaseModel):
    admin: "UsersSetActiveAdmin"


class UsersSetActiveAdmin(BaseModel):
    user: "UsersSetActiveAdminUser"


class UsersSetActiveAdminUser(BaseModel):
    mutate: Optional["UsersSetActiveAdminUserMutate"]


class UsersSetActiveAdminUserMutate(BaseModel):
    set_active: Union[
        "UsersSetActiveAdminUserMutateSetActiveUser",
        "UsersSetActiveAdminUserMutateSetActiveInvalidInput",
        "UsersSetActiveAdminUserMutateSetActiveOperationError",
    ] = Field(alias="setActive", discriminator="typename__")


class UsersSetActiveAdminUserMutateSetActiveUser(UserSelection):
    typename__: Literal["User"] = Field(alias="__typename")


class UsersSetActiveAdminUserMutateSetActiveInvalidInput(InvalidInputSelection):
    typename__: Literal["InvalidInput"] = Field(alias="__typename")


class UsersSetActiveAdminUserMutateSetActiveOperationError(OperationErrorSelection):
    typename__: Literal["OperationError"] = Field(alias="__typename")


UsersSetActive.model_rebuild()
UsersSetActiveAdmin.model_rebuild()
UsersSetActiveAdminUser.model_rebuild()
UsersSetActiveAdminUserMutate.model_rebuild()
