fragment UnmanagedRoleSelection on UnmanagedRole {
  id
  name
  arn
}
fragment ManagedRoleSelection on ManagedRole {
  id
  name
  arn
}
fragment RoleSelection on Role {
  __typename
  ...UnmanagedRoleSelection
  ...ManagedRoleSelection
}
fragment UserSelection on User {
  name
  email
  dateJoined
  lastLogin
  isActive
  isAdmin
  isSsoOnly
  isService
  role {
    ...RoleSelection
  }
  extraRoles {
    ...RoleSelection
  }
}
fragment UserMutationSelection on UserResult {
  ...UserSelection
  ...InvalidInputSelection
  ...OperationErrorSelection
}
fragment InvalidInputSelection on InvalidInput {
  errors {
    path
    message
    name
    context
  }
}
fragment OperationErrorSelection on OperationError {
  message
  name
  context
}
fragment SsoConfigSelection on SsoConfig {
  text
  timestamp
  uploader {
    ...UserSelection
  }
}

query rolesList {
  roles {
    ...RoleSelection
  }
}

query usersGet($name: String!) {
  admin {
    user {
      get(name: $name) {
        ...UserSelection
      }
    }
  }
}

query usersList {
  admin {
    user {
      list {
        ...UserSelection
      }
    }
  }
}

mutation usersCreate($input: UserInput!) {
  admin {
    user {
      create(input: $input) {
        ...UserMutationSelection
      }
    }
  }
}

mutation usersDelete($name: String!) {
  admin {
    user {
      mutate(name: $name) {
        delete {
          ...InvalidInputSelection
          ...OperationErrorSelection
        }
      }
    }
  }
}

mutation usersSetEmail($email: String!, $name: String!) {
  admin {
    user {
      mutate(name: $name) {
        setEmail(email: $email) {
          ...UserMutationSelection
        }
      }
    }
  }
}

mutation usersSetAdmin($name: String!, $admin: Boolean!) {
  admin {
    user {
      mutate(name: $name) {
        setAdmin(admin: $admin) {
          ...UserMutationSelection
        }
      }
    }
  }
}

mutation usersSetActive($active: Boolean!, $name: String!) {
  admin {
    user {
      mutate(name: $name) {
        setActive(active: $active) {
          ...UserMutationSelection
        }
      }
    }
  }
}

mutation usersResetPassword($name: String!) {
  admin {
    user {
      mutate(name: $name) {
        resetPassword {
          ...InvalidInputSelection
          ...OperationErrorSelection
        }
      }
    }
  }
}

mutation usersSetRole($name: String!, $role: String!, $extraRoles: [String!], $append: Boolean!) {
  admin {
    user {
      mutate(name: $name) {
        setRole(role: $role, extraRoles: $extraRoles, append: $append) {
          ...UserSelection
          ...InvalidInputSelection
          ...OperationErrorSelection
        }
      }
    }
  }
}

mutation usersAddRoles($name: String!, $roles: [String!]!) {
  admin {
    user {
      mutate(name: $name) {
        addRoles(roles: $roles) {
          ...UserSelection
          ...InvalidInputSelection
          ...OperationErrorSelection
        }
      }
    }
  }
}

mutation usersRemoveRoles($name: String!, $roles: [String!]!, $fallback: String) {
  admin {
    user {
      mutate(name: $name) {
        removeRoles(roles: $roles, fallback: $fallback) {
          ...UserSelection
          ...InvalidInputSelection
          ...OperationErrorSelection
        }
      }
    }
  }
}

query ssoConfigGet {
  admin {
    ssoConfig {
      ...SsoConfigSelection
    }
  }
}

mutation ssoConfigSet($config: String) {
  admin {
    setSsoConfig(config: $config) {
      ...SsoConfigSelection
      ...InvalidInputSelection
      ...OperationErrorSelection
    }
  }
}

query bucketTabulatorTablesList($name: String!) {
  bucketConfig(name: $name) {
    tabulatorTables {
      name
      config
    }
  }
}

mutation bucketTabulatorTableSet($bucketName: String!, $tableName: String!, $config: String) {
  admin {
    bucketSetTabulatorTable(bucketName: $bucketName, tableName: $tableName, config: $config) {
      __typename
      ...InvalidInputSelection
      ...OperationErrorSelection
    }
  }
}

mutation bucketTabulatorTableRename($bucketName: String!, $tableName: String!, $newTableName: String!)  {
  admin {
    bucketRenameTabulatorTable(bucketName: $bucketName, tableName: $tableName, newTableName: $newTableName) {
      __typename
      ...InvalidInputSelection
      ...OperationErrorSelection
    }
  }
}

query tabulatorGetOpenQuery {
  admin {
    tabulatorOpenQuery
  }
}

mutation tabulatorSetOpenQuery($enabled: Boolean!) {
  admin {
    setTabulatorOpenQuery(enabled: $enabled) {
      tabulatorOpenQuery
    }
  }
}
