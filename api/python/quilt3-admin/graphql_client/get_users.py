# Generated by ariadne-codegen
# Source: queries.graphql

from typing import Annotated, Any, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .fragments import ManagedRoleSelection, UnmanagedRoleSelection


class GetUsers(BaseModel):
    admin: "GetUsersAdmin"


class GetUsersAdmin(BaseModel):
    user: "GetUsersAdminUser"


class GetUsersAdminUser(BaseModel):
    list: List["GetUsersAdminUserList"]


class GetUsersAdminUserList(BaseModel):
    name: str
    email: str
    date_joined: Any = Field(alias="dateJoined")
    last_login: Any = Field(alias="lastLogin")
    is_active: bool = Field(alias="isActive")
    is_admin: bool = Field(alias="isAdmin")
    is_sso_only: bool = Field(alias="isSsoOnly")
    is_service: bool = Field(alias="isService")
    role: Optional[
        Annotated[
            Union[
                "GetUsersAdminUserListRoleUnmanagedRole",
                "GetUsersAdminUserListRoleManagedRole",
            ],
            Field(discriminator="typename__"),
        ]
    ]
    extra_roles: List[
        Annotated[
            Union[
                "GetUsersAdminUserListExtraRolesUnmanagedRole",
                "GetUsersAdminUserListExtraRolesManagedRole",
            ],
            Field(discriminator="typename__"),
        ]
    ] = Field(alias="extraRoles")


class GetUsersAdminUserListRoleUnmanagedRole(UnmanagedRoleSelection):
    typename__: Literal["UnmanagedRole"] = Field(alias="__typename")


class GetUsersAdminUserListRoleManagedRole(ManagedRoleSelection):
    typename__: Literal["ManagedRole"] = Field(alias="__typename")


class GetUsersAdminUserListExtraRolesUnmanagedRole(UnmanagedRoleSelection):
    typename__: Literal["UnmanagedRole"] = Field(alias="__typename")


class GetUsersAdminUserListExtraRolesManagedRole(ManagedRoleSelection):
    typename__: Literal["ManagedRole"] = Field(alias="__typename")


GetUsers.model_rebuild()
GetUsersAdmin.model_rebuild()
GetUsersAdminUser.model_rebuild()
GetUsersAdminUserList.model_rebuild()
